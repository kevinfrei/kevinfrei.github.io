{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ddo","data","key","text","undefined","toString","styles","root","flexGrow","unitOptions","machineOptions","cutWidthOptions","fluteOptions","aggressionOptions","materialOptions","feedRate","depth","frMult","Map","trim","str","acc","val","toFixed","indexOf","i","length","console","log","substring","App","React","useState","machine","setMachine","unit","setUnit","cutWidth","setcutWidth","numFlutes","setNumFlutes","aggression","setAggression","material","setMaterial","rpmValue","setRPMval","depthOfCut","chipLoad","materialData","cutterNumber","fluteCount","machineFactor","machineKey","aggressionFactor","unitScale","multiplier","get","Math","min","dd","label","options","change","style","sw","Dropdown","defaultSelectedKey","placeholder","onChange","_ev","_itm","index","selectedKey","width","className","Stack","Text","variant","Slider","max","value","ChoiceGroup","flexContainer","display","option","TextField","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ada4cb83.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport {\n  ChoiceGroup,\n  Dropdown,\n  IChoiceGroupOption,\n  IDropdownOption,\n  Slider,\n  Stack,\n  TextField,\n  Text,\n} from \"@fluentui/react\";\n\nfunction ddo<T>(\n  data: T,\n  key: string | number,\n  text?: string\n): IDropdownOption<T> {\n  return text !== undefined\n    ? { key, text, data }\n    : { key, text: key.toString(), data };\n}\n\nconst styles = { root: { flexGrow: 1 } };\nconst unitOptions: IChoiceGroupOption[] = [\n  { text: \"mm\", key: \"mm\", styles },\n  { text: \"inches\", key: \"inch\", styles },\n];\n\nconst machineDefault = 0;\nconst machineOptions: IDropdownOption<number>[] = [\n  ddo(2, \"PowerRoute\"), // Default, cuz that's what I own\n  ddo(1, \"M3\"),\n  ddo(0.7, \"CarveKing\"),\n  ddo(1.7, \"MegaV\"),\n];\n\nconst cutWidthDefault = 1;\nconst cutWidthOptions: IDropdownOption<number>[] = [\n  ddo(0, '1/16\"'),\n  ddo(1, '1/8\"'), // Default\n  ddo(2, '3/16\"'),\n  ddo(3, '1/4\"'),\n  ddo(0, \"2mm\"),\n  ddo(1, \"3mm\"),\n  ddo(2, \"5mm\"),\n  ddo(3, \"6mm\"),\n];\n\nconst fluteDefault = 1;\nconst fluteOptions: IDropdownOption<number>[] = [\n  ddo(1, 1),\n  ddo(2, 2), // Default\n  ddo(3, 3),\n  ddo(4, 4),\n];\n\nconst aggressionDefault = 1;\nconst aggressionOptions: IDropdownOption<number>[] = [\n  ddo(0.5, \"Conservative\"),\n  ddo(1, \"Normal\"), // Default\n  ddo(1.33, \"Aggressive\"),\n];\n\ntype IMaterialData = {\n  feedRate: [number, number, number, number];\n  depth: [number, number, number, number];\n  frMult: Map<string | number, number>;\n};\n\nconst materialDefault = 2;\nconst materialOptions: IDropdownOption<IMaterialData>[] = [\n  ddo(\n    {\n      feedRate: [0.0007, 0.0009, 0.001, 0.0011],\n      depth: [0.012, 0.018, 0.0175, 0.0175],\n      frMult: new Map<string, number>([[\"PowerRoute\", 1.6]]),\n    },\n    \"Aluminum (6061)\"\n  ),\n  ddo(\n    {\n      feedRate: [0.0015, 0.002, 0.0023, 0.0027],\n      depth: [0.05, 0.065, 0.075, 0.075],\n      frMult: new Map<string, number>([[\"PowerRoute\", 2]]),\n    },\n    \"Hard Plastic (i.e. acrylic, pvc)\"\n  ),\n  ddo(\n    {\n      feedRate: [0.0012, 0.0016, 0.002, 0.0023],\n      depth: [0.04, 0.06, 0.08, 0.08],\n      frMult: new Map<string, number>([[\"PowerRoute\", 2]]),\n    },\n    \"Hardwood (i.e. maple, oak, walnut)\"\n  ),\n  ddo(\n    {\n      feedRate: [0.0018, 0.002, 0.0023, 0.0027],\n      depth: [0.08, 0.12, 0.16, 0.17],\n      frMult: new Map<string, number>([[\"PowerRoute\", 2]]),\n    },\n    \"MDF\"\n  ),\n  ddo(\n    {\n      feedRate: [0.0016, 0.002, 0.0023, 0.0025],\n      depth: [0.06, 0.07, 0.08, 0.08],\n      frMult: new Map<string, number>([[\"PowerRoute\", 2]]),\n    },\n    \"Soft Plastic (i.e. abs, styrofoam)\"\n  ),\n  ddo(\n    {\n      feedRate: [0.0016, 0.0022, 0.0024, 0.0028],\n      depth: [0.06, 0.1, 0.14, 0.16],\n      frMult: new Map<string, number>([[\"PowerRoute\", 2]]),\n    },\n    \"Softwood (i.e. pine, cedar, fir)\"\n  ),\n];\n\nfunction trim(str: number, acc: number): string {\n  const val = str.toFixed(acc);\n  if (val.indexOf(\".\") > -1) {\n    for (let i = val.length - 1; i > 0; i--) {\n      if (val[i] !== \"0\") {\n        console.log(val, i, val[i]);\n        return val.substring(0, val[i] === \".\" ? i : i + 1);\n      }\n    }\n  }\n  return val;\n}\n\nfunction App() {\n  // All the 'input' state of the calculator\n  const [machine, setMachine] = React.useState(machineDefault);\n  const [unit, setUnit] = React.useState<\"mm\" | \"inch\">(\"mm\");\n  const [cutWidth, setcutWidth] = React.useState(cutWidthDefault);\n  const [numFlutes, setNumFlutes] = React.useState(fluteDefault);\n  const [aggression, setAggression] = React.useState(aggressionDefault);\n  const [material, setMaterial] = React.useState(materialDefault);\n  const [rpmValue, setRPMval] = React.useState(15000);\n\n  let feedRate = 0;\n  let depthOfCut = 0;\n  let chipLoad = 0;\n  if (\n    machine !== undefined &&\n    aggression !== undefined &&\n    cutWidth !== undefined &&\n    material !== undefined &&\n    numFlutes !== undefined\n  ) {\n    const materialData = materialOptions[material].data;\n    const cutterNumber = cutWidthOptions[cutWidth].data;\n    const fluteCount = fluteOptions[numFlutes].key as number;\n    const machineFactor = machineOptions[machine].data;\n    const machineKey = machineOptions[machine].key;\n    const aggressionFactor = aggressionOptions[aggression].data;\n    if (\n      materialData !== undefined &&\n      cutterNumber !== undefined &&\n      machineFactor !== undefined &&\n      aggressionFactor !== undefined\n    ) {\n      const unitScale = unit === \"mm\" ? 25.4 : 1;\n      feedRate = materialData.feedRate[cutterNumber] * rpmValue * fluteCount;\n      // Check for a machine-specific multiplier override\n      const multiplier = materialData.frMult.get(machineKey) || 1;\n      feedRate = Math.min(320, feedRate * multiplier) * unitScale;\n      depthOfCut =\n        materialData.depth[cutterNumber] *\n        machineFactor *\n        aggressionFactor *\n        unitScale;\n      chipLoad = (feedRate / (rpmValue * fluteCount)) * unitScale;\n    }\n  }\n  function dd<T>(\n    label: string,\n    options: IDropdownOption<T>[],\n    val: number,\n    change: (option: number) => void\n  ) {\n    return (\n      <div style={sw}>\n        <Dropdown\n          defaultSelectedKey={options[val].key}\n          placeholder={label}\n          label={label}\n          options={options}\n          onChange={(_ev, _itm, index) => index !== undefined && change(index)}\n          selectedKey={options[val].key}\n        />\n      </div>\n    );\n  }\n  const sw = { width: \"250px\" };\n\n  return (\n    <div className=\"center-screen\">\n      <Stack>\n        <Text variant=\"xLarge\">Feed Rate Calculator</Text>\n        {dd(\"Select a machine\", machineOptions, machine, setMachine)}\n        {dd(\"Cutter Diameter\", cutWidthOptions, cutWidth, setcutWidth)}\n        {dd(\"# of Flutes\", fluteOptions, numFlutes, setNumFlutes)}\n        {dd(\"Aggression\", aggressionOptions, aggression, setAggression)}\n        {dd(\"Material\", materialOptions, material, setMaterial)}\n        <div style={sw}>\n          <Slider\n            label=\"RPM\"\n            min={800}\n            max={25000}\n            value={rpmValue}\n            onChange={setRPMval}\n          />\n          <ChoiceGroup\n            styles={{\n              flexContainer: { display: \"flex\" },\n              root: { display: \"inline\" },\n            }}\n            selectedKey={unit}\n            options={unitOptions}\n            onChange={(_ev: any, option?: IChoiceGroupOption) => {\n              option && setUnit(option.key === \"mm\" ? \"mm\" : \"inch\");\n            }}\n            label=\"Output Units\"\n          />\n          <TextField label=\"Feed Rate\" readOnly value={trim(feedRate, 4)} />\n          <TextField\n            label=\"Depth of Cut\"\n            readOnly\n            value={trim(depthOfCut, 4)}\n          />\n          <TextField label=\"Chip Load\" readOnly value={trim(chipLoad, 6)} />\n        </div>\n      </Stack>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}